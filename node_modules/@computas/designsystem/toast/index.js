var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// components/toast/toast.ts
import { LitElement as LitElement2, css as css5, html as html2 } from "lit";
import { customElement as customElement2, query, state as state2 } from "lit/decorators.js";
import { repeat } from "lit/directives/repeat.js";

// components/toast/toast-item.ts
import { LitElement, css as css4, html, unsafeCSS } from "lit";
import { customElement, property, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";

// global-css/a11y.css?inline
import { css } from "lit";
var styles = css`*:focus-visible,
.cx-outline-on-focus-within:has(:focus-visible) {
  outline: 2px auto var(--cx-color-border-accent-1);
  outline-offset: 2px;
}
.cx-visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
`;
var a11y_default = styles;

// global-css/animations.css?inline
import { css as css2 } from "lit";
var styles2 = css2`@keyframes cx-gradient-background-rotation {
  0%, 100% {
    background-position: 70% 30%;
  }
  5% {
    background-position: 62% 24%;
  }
  10% {
    background-position: 54% 22%;
  }
  15% {
    background-position: 46% 22%;
  }
  20% {
    background-position: 38% 24%;
  }
  25% {
    background-position: 30% 30%;
  }
  30% {
    background-position: 24% 38%;
  }
  35% {
    background-position: 22% 46%;
  }
  40% {
    background-position: 22% 54%;
  }
  45% {
    background-position: 24% 62%;
  }
  50% {
    background-position: 30% 70%;
  }
  55% {
    background-position: 38% 76%;
  }
  60% {
    background-position: 46% 78%;
  }
  65% {
    background-position: 54% 78%;
  }
  70% {
    background-position: 62% 76%;
  }
  75% {
    background-position: 70% 70%;
  }
  80% {
    background-position: 76% 62%;
  }
  85% {
    background-position: 78% 54%;
  }
  90% {
    background-position: 78% 46%;
  }
  95% {
    background-position: 76% 38%;
  }
}
@keyframes cx-waveline {
  to {
    background-position: 16px;
  }
}
`;
var animations_default = styles2;

// components/button/button.css?inline
import { css as css3 } from "lit";
var styles3 = css3`.cx-btn__primary,
.cx-btn__secondary,
.cx-btn__tertiary,
.cx-btn__danger {
  --cx-gradient-highlight-size: 500%;
  --icon-size: var(--cx-spacing-5);
  display: inline-flex;
  gap: var(--cx-spacing-2);
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 0.875rem;
  font-weight: 500;
  line-height: 1rem;
  padding: var(--cx-spacing-4) var(--cx-spacing-6);
  min-width: 6rem;
  height: fit-content;
  border-radius: var(--cx-radius-pill);
  background: transparent;
  border: none;
  transition:
    scale 20ms ease,
    color 300ms ease,
    box-shadow 300ms ease,
    --cx-gradient-highlight 300ms ease,
    --cx-gradient-background 300ms ease;
  background-image:
    radial-gradient(
      ellipse at center,
      var(--cx-gradient-highlight),
      var(--cx-gradient-background) 50%,
      var(--cx-gradient-background));
  background-size: var(--cx-gradient-highlight-size) var(--cx-gradient-highlight-size);
  animation: cx-gradient-background-rotation 7s linear infinite;
  cx-icon {
    width: var(--icon-size);
    height: var(--icon-size);
  }
  &:active {
    scale: 0.99;
  }
  &:hover,
  &:focus-visible {
    --cx-gradient-highlight: var(--cx-color-blue);
    --cx-gradient-background: var(--cx-color-grey-700);
    box-shadow: none;
  }
}
:is(.cx-btn__primary, .cx-btn__secondary, .cx-btn__tertiary):is(:hover, :focus-visible) {
  color: var(--cx-color-text-static-light);
}
.cx-btn__primary {
  --cx-gradient-highlight: var(--cx-color-background-accent-1);
  --cx-gradient-background: var(--cx-color-background-accent-1);
  color: var(--cx-color-text-inverted);
}
.cx-btn__secondary {
  --cx-gradient-highlight: var(--cx-color-background-primary);
  --cx-gradient-background: var(--cx-color-background-primary);
  color: var(--cx-color-text-primary);
  box-shadow: inset 0 0 0 1px var(--cx-color-border-primary);
}
.cx-btn__tertiary {
  color: var(--cx-color-text-primary);
}
.cx-btn__danger {
  --cx-gradient-highlight: var(--cx-color-signal-danger);
  --cx-gradient-background: var(--cx-color-signal-danger);
  --cx-gradient-highlight-size: 700%;
  color: var(--cx-color-text-static-dark);
  background-color: var(--cx-color-signal-danger);
  &:focus-visible,
  &:hover {
    --cx-gradient-highlight: var(--cx-color-grey-700);
    --cx-gradient-background: var(--cx-color-signal-danger);
  }
}
.cx-btn__sm {
  --icon-size: var(--cx-spacing-4);
  padding: var(--cx-spacing-3) var(--cx-spacing-4);
  font-size: 0.75rem;
  min-width: 5rem;
}
.cx-btn__lg {
  --icon-size: var(--cx-spacing-6);
  padding: var(--cx-spacing-6) var(--cx-spacing-8);
  font-size: 1.125rem;
  gap: var(--cx-spacing-3);
}
.cx-btn__icon {
  --icon-size: var(--cx-spacing-6);
  padding: var(--cx-spacing-3);
  min-width: unset;
  width: fit-content;
  > * {
    width: var(--icon-size);
    height: var(--icon-size);
    fill: currentColor;
  }
}
.cx-btn__icon.cx-btn__sm {
  --icon-size: var(--cx-spacing-4);
  padding: var(--cx-spacing-3);
}
.cx-btn__icon.cx-btn__lg {
  --icon-size: var(--cx-spacing-8);
  padding: var(--cx-spacing-4);
}
`;
var button_default = styles3;

// components/toast/toast-item.ts
import { addIcons } from "../icon";
import { checkCircle, close, errorCircle, infoCircle, warning } from "../icon/iconRegistry";

// components/shared/breakpointObserver.ts
var breakpointToMediaQuery = {
  mobile: "(width <= 360px)",
  tablet: "(360px > width <= 760px)",
  desktop: "(760px > width)"
};
var BreakpointObserver = class {
  constructor(host, query2) {
    this.host = host;
    this.query = query2;
    this.abortController = new AbortController();
    this.matches = false;
    this.host.addController(this);
  }
  setNewValue(matches) {
    this.matches = matches;
    this.host.requestUpdate();
  }
  hostConnected() {
    const mediaQuery = breakpointToMediaQuery[this.query];
    const mediaMatcher = window.matchMedia(mediaQuery);
    this.setNewValue(mediaMatcher.matches);
    mediaMatcher.addEventListener("change", (changeEvent) => this.setNewValue(changeEvent.matches), {
      signal: this.abortController.signal
    });
  }
  hostDisconnected() {
    this.abortController.abort();
  }
};

// components/toast/toast-item.ts
addIcons(errorCircle, infoCircle, warning, checkCircle, close);
var ToastItem = class extends LitElement {
  constructor() {
    super(...arguments);
    this.toastTimeoutId = 0;
    this.isMobile = new BreakpointObserver(this, "mobile");
    this.active = false;
    this.startFadeOutAnimation = false;
  }
  attributeChangedCallback(propName, _oldVal, newVal) {
    if (propName === "active" && newVal === "true") {
      this.toastTimeoutId = window.setTimeout(() => this.closeToast(), this.toastConfig.duration);
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    window.clearTimeout(this.toastTimeoutId);
  }
  closeToast() {
    this.startFadeOutAnimation = true;
  }
  onAnimationEnd(event) {
    if (event.animationName === "fade-out") {
      this.dispatchEvent(new CustomEvent("close", { bubbles: true, composed: true }));
    }
  }
  render() {
    const iconName = this.toastConfig.severity === "success" ? "check-circle" : "info-circle";
    return html`
      <output
        role="alert"
        class=${classMap({
      "fade-out": this.startFadeOutAnimation,
      success: this.toastConfig.severity === "success"
    })}
        @animationend=${this.onAnimationEnd}
      >
        <cx-icon name=${iconName} size=${this.isMobile.matches ? 6 : 8}></cx-icon>

        ${this.toastConfig.body}
      
        <button class=${classMap({ "close-btn cx-btn__tertiary cx-btn__icon": true, "cx-btn__sm": this.isMobile.matches })} @click=${this.closeToast}>
          <cx-icon name="close"></cx-icon>
        </button>
      </output>
		`;
  }
};
ToastItem.styles = [
  unsafeCSS(button_default),
  unsafeCSS(a11y_default),
  unsafeCSS(animations_default),
  css4`
      output {
        display: flex;
        align-items: center;
        gap: var(--cx-spacing-4);
        background-color: var(--cx-color-background-accent-5-soft);
        border: 1px solid var(--cx-color-border-strong);
        border-radius: var(--cx-radius-medium);
        padding: var(--cx-spacing-4);
        
        color: var(--cx-color-text-primary);
        font-family: inherit;
        font-size: 1rem;
        font-weight: 400;
        line-height: 1.6;
        
        transition: opacity 100ms ease, translate 300ms var(--ease-spring-2);
        opacity: 1;
        translate: 0;

        @starting-style {
          opacity: 0;
          translate: 0 -10px;
        }

        @media only screen and (max-width: 360px) {
          gap: var(--cx-spacing-3);
        }
      }

      .success {
        background-color: var(--cx-color-background-accent-2-soft);
      }

      .fade-out {
        animation: fade-out 150ms var(--ease-in-2) forwards;
      }

      .close-btn {
        cursor: pointer;
        margin-left: auto;
      }

      @keyframes fade-out {
        to {
          opacity: 0;
          translate: 0 30px;
        }
      }
	  `
];
__decorateClass([
  property({ type: Object })
], ToastItem.prototype, "toastConfig", 2);
__decorateClass([
  property({ type: Boolean })
], ToastItem.prototype, "active", 2);
__decorateClass([
  state()
], ToastItem.prototype, "startFadeOutAnimation", 2);
ToastItem = __decorateClass([
  customElement("cx-toast-item")
], ToastItem);

// components/toast/toast.ts
var CX_TOAST_ID = 1;
var Toast = class extends LitElement2 {
  constructor() {
    super(...arguments);
    this.abortController = new AbortController();
    this.toastQueue = [];
  }
  connectedCallback() {
    super.connectedCallback();
    setTimeout(() => this.toastContainerElement.showPopover());
    document.addEventListener("cx-show-toast", (event) => this.addToastToQueue(event), {
      signal: this.abortController.signal
    });
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.abortController.abort();
  }
  addToastToQueue(event) {
    const listClone = this.toastQueue.slice();
    const payload = event.detail;
    const newToastId = CX_TOAST_ID++;
    const toastWithId = { ...payload, id: newToastId };
    listClone.push(toastWithId);
    this.toastQueue = listClone.slice();
  }
  removeToast(toastId) {
    const listClone = [...this.toastQueue];
    const index = listClone.findIndex((toast) => toast.id === toastId);
    if (index !== -1) {
      listClone.splice(index, 1);
      this.toastQueue = listClone;
    }
  }
  render() {
    return html2`
			<div popover="manual" class="toast-list-container">
        ${repeat(
      this.toastQueue.slice(0, 4),
      (toast) => toast.id,
      (toast, index) => html2`
          <cx-toast-item
            style="
              scale: ${1 - index * 0.05};
              z-index: ${this.toastQueue.length - index};
              top: calc(var(--cx-spacing-2) * ${index})"
            .toastConfig=${toast}
            active=${index === 0}
            @close=${() => this.removeToast(toast.id)}></cx-toast-item>
          `
    )}
			</div>
		`;
  }
};
Toast.styles = css5`
    .toast-list-container {
      position: fixed;
      display: grid;
      justify-items: flex-end;
      inset: 0 0 auto auto;

      margin: var(--cx-spacing-4);
      border: none;
      background: transparent;
      padding: 0;
      overflow: unset;

      @media only screen and (max-width: 360px) {
        inset: auto auto 88px auto;
        margin-inline: 40px;

        cx-toast-item {
          transform-origin: center bottom;
        }
      }
    }

    cx-toast-item {
      grid-area: 1 / 1; 
      position: relative;
      transform-origin: right bottom;
      transition: scale 200ms ease, top 200ms ease;
    }
  `;
__decorateClass([
  state2()
], Toast.prototype, "toastQueue", 2);
__decorateClass([
  query("[popover]")
], Toast.prototype, "toastContainerElement", 2);
Toast = __decorateClass([
  customElement2("cx-toast")
], Toast);

// components/toast/showToast.ts
var toastDefaults = {
  duration: 5e3,
  severity: "info"
};
var showToast = (config) => {
  const mergedConfig = { ...toastDefaults, ...config };
  const event = new CustomEvent("cx-show-toast", { bubbles: true, composed: true, detail: mergedConfig });
  document.dispatchEvent(event);
};
export {
  Toast,
  showToast
};
//# sourceMappingURL=index.js.map
