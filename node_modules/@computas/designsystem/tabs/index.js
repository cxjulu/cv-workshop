var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// components/tabs/tab.ts
import { LitElement, css, html } from "lit";
import { customElement, property } from "lit/decorators.js";
var Tab = class extends LitElement {
  constructor() {
    super(...arguments);
    this.header = "Tab title";
  }
  render() {
    return html`
      <slot></slot>
    `;
  }
};
Tab.styles = css`
    :host {
      display: block;
    }


  `;
__decorateClass([
  property({ type: String, reflect: true })
], Tab.prototype, "header", 2);
Tab = __decorateClass([
  customElement("cx-tab")
], Tab);

// components/tabs/tab-group.ts
import { LitElement as LitElement2, css as css5, html as html2, unsafeCSS } from "lit";
import { customElement as customElement2, property as property2, query, state } from "lit/decorators.js";
import { classMap } from "lit/directives/class-map.js";

// global-css/a11y.css?inline
import { css as css2 } from "lit";
var styles = css2`*:focus-visible,
.cx-outline-on-focus-within:has(:focus-visible) {
  outline: 2px auto var(--cx-color-border-accent-1);
  outline-offset: 2px;
}
.cx-visually-hidden {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}
`;
var a11y_default = styles;

// global-css/animations.css?inline
import { css as css3 } from "lit";
var styles2 = css3`@keyframes cx-gradient-background-rotation {
  0%, 100% {
    background-position: 70% 30%;
  }
  5% {
    background-position: 62% 24%;
  }
  10% {
    background-position: 54% 22%;
  }
  15% {
    background-position: 46% 22%;
  }
  20% {
    background-position: 38% 24%;
  }
  25% {
    background-position: 30% 30%;
  }
  30% {
    background-position: 24% 38%;
  }
  35% {
    background-position: 22% 46%;
  }
  40% {
    background-position: 22% 54%;
  }
  45% {
    background-position: 24% 62%;
  }
  50% {
    background-position: 30% 70%;
  }
  55% {
    background-position: 38% 76%;
  }
  60% {
    background-position: 46% 78%;
  }
  65% {
    background-position: 54% 78%;
  }
  70% {
    background-position: 62% 76%;
  }
  75% {
    background-position: 70% 70%;
  }
  80% {
    background-position: 76% 62%;
  }
  85% {
    background-position: 78% 54%;
  }
  90% {
    background-position: 78% 46%;
  }
  95% {
    background-position: 76% 38%;
  }
}
@keyframes cx-waveline {
  to {
    background-position: 16px;
  }
}
`;
var animations_default = styles2;

// components/tabs/tab.css?inline
import { css as css4 } from "lit";
var styles3 = css4`.cx-tab {
  --line-height: 1.5rem;
  --underline-squiggle-height: 7px;
  --underline-height: 6px;
  --underline-squiggle-offset: calc( var(--line-height) + (var(--cx-spacing-1) * 2) + (var(--underline-height) / 2) );
  display: inline-flex;
  position: relative;
  padding: 7px 0px calc(var(--cx-spacing-1) + var(--underline-height));
  color: var(--cx-color-text-primary);
  line-height: var(--line-height);
  font-size: 1rem;
  font-weight: 500;
  text-decoration: none;
  user-select: none;
  &:hover {
    text-underline-offset: 0.25rem;
    text-decoration-color: var(--cx-color-text-primary);
  }
  &::before {
    content: "";
    position: absolute;
    inset: auto 0 0;
    transition: background-color 0.3s ease;
    height: var(--underline-height);
    background: transparent;
    border-radius: var(--cx-radius-mini) var(--cx-radius-mini) 0px 0px;
  }
  &::after {
    position: absolute;
    opacity: 0;
    content: "";
    top: calc(var(--underline-squiggle-offset));
    left: 0;
    width: 100%;
    height: var(--underline-squiggle-height);
    background-size: 1rem;
    background-position: 0;
    animation: cx-waveline 0.5s linear infinite;
    transition: all ease 0.5s;
    background-image: url('data:image/svg+xml,<svg width="18" height="7" viewBox="0 0 18 7" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M5.57715 4.17283C4.4006 5.46648 2.86064 7 0 7V5C1.96863 5 3.00041 4.03352 4.09755 2.82717C4.18247 2.7338 4.26911 2.63679 4.3579 2.53738C5.35523 1.42077 6.62422 0 8.78049 0C10.9089 0 12.2699 1.38741 13.3632 2.50189C13.4613 2.6018 13.5571 2.69953 13.6512 2.79386C14.8672 4.01314 16.0118 5 18 5V7C15.1589 7 13.5123 5.48686 12.2351 4.20614C12.1748 4.14575 12.1157 4.08635 12.0576 4.02798C10.814 2.77827 10.0395 2 8.78049 2C7.54894 2 6.87361 2.74423 5.73842 3.99523C5.68569 4.05335 5.63196 4.11255 5.57715 4.17283Z" fill="%2329CFF5"/></svg>');
    background-repeat: repeat-x;
  }
  &:hover::after {
    opacity: 1;
  }
}
.cx-tab--active {
  &::before {
    background-color: var(--cx-color-background-accent-5);
  }
  &:hover::after {
    opacity: 0;
  }
}
.cx-tab ~ .cx-tab {
  margin-left: var(--cx-spacing-4);
}
`;
var tab_default = styles3;

// components/tabs/tab-group.ts
var TabGroup = class extends LitElement2 {
  constructor() {
    super(...arguments);
    /**
     * @description The index of the active tab
     * @default 0
     */
    this._activeTabIndex = 0;
    this.tabHeaders = [];
  }
  set activeTabIndex(newIndex) {
    this._activeTabIndex = newIndex;
    this.updateTabContentVisibility();
  }
  get activeTabIndex() {
    return this._activeTabIndex;
  }
  updateTabContentVisibility() {
    const tabContent = this.tabsContentContainer.assignedElements({ flatten: true });
    tabContent.forEach((tabElement, index) => {
      if (index < this.activeTabIndex) {
        tabElement.classList.remove("tab-content-active");
        tabElement.style.setProperty("--x-offset", "-10px");
      } else if (index > this.activeTabIndex) {
        tabElement.classList.remove("tab-content-active");
        tabElement.style.setProperty("--x-offset", "10px");
      } else {
        tabElement.classList.add("tab-content-active");
      }
    });
    this.tabHeaders = tabContent.map((tab) => tab.header);
  }
  setActiveTabIndex(newTabIndex) {
    this.activeTabIndex = newTabIndex;
    this.dispatchEvent(
      new CustomEvent("activeTabIndexChange", {
        bubbles: true,
        composed: true,
        detail: { newIndex: newTabIndex }
      })
    );
  }
  render() {
    return html2`
      <header role="tablist">
        ${this.tabHeaders.map(
      (tabHeader, index) => html2`
          <label
            class=${classMap({ "cx-tab": true, "cx-outline-on-focus-within": true, "cx-tab--active": this.activeTabIndex === index })}
            role="none"
          >
            <input 
              class="cx-visually-hidden"
              role="tab"
              type="radio"
              name="cx-tab-group"
              id=${`tab-${index}`}
              aria-controls=${`tabpanel-${index}`}
              aria-selected=${this.activeTabIndex === index}
              @click=${() => this.setActiveTabIndex(index)}
              ?checked=${this.activeTabIndex === index} />
              ${tabHeader}
            </label>
            `
    )}
      </header>

      <slot
        role="tabpanel"
        id=${`tabpanel-${this.activeTabIndex}`}
        aria-labelledby=${`tab-${this.activeTabIndex}`}
        tabindex="0"
        class="content-container"
        @slotchange=${this.updateTabContentVisibility}></slot>
    `;
  }
};
TabGroup.styles = [
  unsafeCSS(tab_default),
  unsafeCSS(a11y_default),
  unsafeCSS(animations_default),
  css5`
      :host {
        display: flex;
        flex-direction: column;
      }
      
      .cx-tab {
        cursor: pointer;
      }

      .content-container {
        display: grid;
        padding-top: var(--cx-spacing-4);
      }

      ::slotted(cx-tab) {
        --x-offset: 10px;
        grid-area: 1 / 1;
        opacity: 0;
        display: none;
        translate: var(--x-offset) 0;
        transition:
          opacity 300ms ease,
          translate 500ms var(--ease-spring-3),
          display 300ms allow-discrete;
      }

      ::slotted(.tab-content-active) {
        display: unset;
        opacity: 1;
        translate: 0 0;

        @starting-style {
          opacity: 0;
          translate: var(--x-offset) 0;
        }
      }
    `
];
__decorateClass([
  property2({ type: Number, reflect: true })
], TabGroup.prototype, "activeTabIndex", 1);
__decorateClass([
  state()
], TabGroup.prototype, "tabHeaders", 2);
__decorateClass([
  query('[role="tabpanel"]')
], TabGroup.prototype, "tabsContentContainer", 2);
TabGroup = __decorateClass([
  customElement2("cx-tab-group")
], TabGroup);
export {
  Tab,
  TabGroup
};
//# sourceMappingURL=index.js.map
