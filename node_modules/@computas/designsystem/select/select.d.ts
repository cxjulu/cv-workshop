import { LitElement } from 'lit';
import '../icon';
import type { OptionValue } from './types';
declare const Select_base: (new (...args: any[]) => {
    elementInternals: ElementInternals;
}) & typeof LitElement;
export declare class Select extends Select_base {
    static shadowRootOptions: {
        delegatesFocus: boolean;
        mode: ShadowRootMode;
        serializable?: boolean;
        slotAssignment?: SlotAssignmentMode;
    };
    static styles: import("lit").CSSResult;
    /**
     * @description The selected value. The selected value must be defined as a value for one of the options.
     * @default ''
     */
    value: OptionValue;
    /**
     * @description Whether the select is required or not
     * @default false
     */
    required: boolean;
    'aria-describedby': string;
    private selectOptions;
    private isExpanded;
    private selectTrigger;
    private popoverElement;
    connectedCallback(): void;
    disconnectedCallback(): void;
    private onSlotChange;
    private onPopoverToggle;
    private onTriggerKeyDown;
    private updateValidState;
    private onKeyDown;
    private setNewValue;
    /**
     * We need to stop click events on the popover, since they will bubble to the
     * label element that wraps the select-component and trigger an "showPopover" event.
     */
    private stopOptionClickEventPropagation;
    render(): import("lit-html").TemplateResult<1>;
}
declare global {
    interface HTMLElementTagNameMap {
        'cx-select': Select;
    }
}
export {};
