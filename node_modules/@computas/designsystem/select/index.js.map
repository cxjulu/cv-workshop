{
  "version": 3,
  "sources": ["../../components/select/select.ts", "../../components/shared/formControl.ts", "../../components/select/option.ts", "../../components/shared/inputModeDetector.ts"],
  "sourcesContent": ["import { LitElement, css, html } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport '../icon';\n\nimport { FormControl } from '../shared/formControl';\nimport type { Option } from './option';\nimport type { OptionValue } from './types';\n\n@customElement('cx-select')\nexport class Select extends FormControl(LitElement) {\n  // `delegateFocus` allows focus to be passed to the select trigger when placed inside a `<label>` element.\n  static shadowRootOptions = { ...LitElement.shadowRootOptions, delegatesFocus: true };\n\n  static styles = css`\n    .trigger {\n      anchor-name: --cx-trigger;\n\n      border: none;\n      background-color: transparent;\n      padding: var(--cx-form-field__block-padding) var(--cx-form-field__inline-padding);\n      width: 100%;\n      min-width: 200px;\n\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: var(--cx-spacing-2);\n      cursor: inherit;\n      \n      color: var(--cx-color-text-primary);\n      font: inherit;\n      font-size: 1rem;\n      font-weight: 400;\n      outline: none;\n    }\n\n    cx-icon {\n      transition: rotate 200ms ease;\n\n      &.rotated {\n        rotate: 180deg;\n      }\n    }\n\n    .trigger-content {\n      display: flex;\n      align-items: center;\n      gap: var(--cx-spacing-2);\n      line-height: 1rem;\n    }\n\n    [popover] {\n      --translate-curve: ease;\n      --translate-duration: 200ms;\n\n      position-anchor: --cx-trigger;\n      position: absolute;\n      opacity: 0;\n      translate: 0px 6px;\n      inset: unset;\n      left: anchor(left);\n      top: anchor(bottom);\n      margin-block: var(--cx-spacing-2);\n      position-try-fallbacks: --top;\n      width: anchor-size(width);\n      transition:\n        display 200ms allow-discrete,\n        overlay 200ms allow-discrete,\n        opacity 200ms ease,\n        translate var(--translate-duration) var(--translate-curve);\n      border: 1px solid var(--cx-color-border-primary);\n      background: var(--cx-color-background-primary);\n      border-radius: var(--cx-radius-medium);\n      padding: 0;\n\n      &:popover-open {\n        --translate-curve: var(--ease-spring-3);\n        --translate-duration: 500ms;\n        opacity: 1;\n        translate: 0px;\n\n        @starting-style {\n          opacity: 0;\n          translate: 0px -6px;\n        } \n      }\n    }\n\n    @position-try --top {\n      top: unset;\n      bottom: anchor(top);\n    }\n  `;\n\n  /**\n   * @description The selected value. The selected value must be defined as a value for one of the options.\n   * @default ''\n   */\n  @property({ type: String, reflect: true })\n  value: OptionValue = '';\n\n  /**\n   * @description Whether the select is required or not\n   * @default false\n   */\n  @property({ type: Boolean, reflect: true })\n  required = false;\n\n  @property({ type: String, reflect: true })\n  'aria-describedby' = '';\n\n  @state()\n  private selectOptions: Option[] = [];\n\n  @state()\n  private isExpanded = false;\n\n  @query('button')\n  private selectTrigger!: HTMLButtonElement;\n\n  @query('[popover]')\n  private popoverElement!: HTMLDivElement;\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    /**\n     * The options emit an \"option-select\" event. We listen for it\n     * so that we can emit the selected value through the \"change\" event.\n     */\n    this.addEventListener('option-select', this.setNewValue);\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.removeEventListener('option-select', this.setNewValue);\n  }\n\n  private onSlotChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    const tabContent = slot.assignedElements({ flatten: true }) as Option[];\n    this.selectOptions = tabContent;\n  }\n\n  private onPopoverToggle(event: ToggleEvent) {\n    if (event.newState === 'open') {\n      this.isExpanded = true;\n\n      this.addEventListener('keydown', this.onKeyDown);\n\n      if (this.value) {\n        this.selectOptions.forEach((option) => {\n          option.selectedValue = this.value;\n\n          if (option.value === this.value) {\n            option.buttonElement.focus();\n            option.buttonElement.tabIndex = 0;\n          } else {\n            option.buttonElement.tabIndex = -1;\n          }\n        });\n      } else {\n        // Focus the first option on open, if no value is selected\n        this.selectOptions.forEach((option, index) => {\n          if (index === 0) {\n            option.buttonElement.focus();\n            option.buttonElement.tabIndex = 0;\n          } else {\n            option.buttonElement.tabIndex = -1;\n          }\n        });\n      }\n    } else {\n      this.removeEventListener('keydown', this.onKeyDown);\n      this.isExpanded = false;\n      this.updateValidState();\n    }\n  }\n\n  private onTriggerKeyDown(event: KeyboardEvent) {\n    if (event.key === 'ArrowDown' && !this.isExpanded) {\n      event.preventDefault();\n      this.popoverElement.showPopover();\n    }\n  }\n\n  private updateValidState() {\n    if (!this.isExpanded && this.required && !this.value) {\n      this.selectTrigger.setCustomValidity('A value is required');\n      this.elementInternals.setValidity({ valueMissing: true }, 'A value is required');\n    } else {\n      this.selectTrigger.setCustomValidity('');\n      this.elementInternals.setValidity({});\n    }\n  }\n\n  private onKeyDown(event: KeyboardEvent) {\n    const currentIndex = this.selectOptions.findIndex((option) => option.buttonElement.tabIndex === 0);\n    const currentFocusedButton = this.selectOptions.at(currentIndex)?.buttonElement;\n\n    // Set the currently focused tabindex to -1\n    if (currentFocusedButton) {\n      currentFocusedButton.tabIndex = -1;\n    }\n\n    let newIndex = currentIndex;\n    if (['ArrowDown', 'ArrowRight'].includes(event.key)) {\n      event.preventDefault();\n      newIndex = (currentIndex + 1) % this.selectOptions.length;\n    } else if (['ArrowUp', 'ArrowLeft'].includes(event.key)) {\n      event.preventDefault();\n      newIndex = (currentIndex - 1 + this.selectOptions.length) % this.selectOptions.length;\n    } else if (event.code === `Key${event.key.toUpperCase()}`) {\n      // Focus on the first option that starts with the pressed letter\n      event.preventDefault();\n      const firstMatchIndex = this.selectOptions.findIndex((opt) =>\n        opt.innerText.toLowerCase().startsWith(event.key.toLowerCase()),\n      );\n      newIndex = firstMatchIndex === -1 ? currentIndex : firstMatchIndex;\n    } else if (event.key === 'Tab') {\n      // Close the select if the user tabs out\n      this.popoverElement.hidePopover();\n    } else if (event.key === 'Escape') {\n      // Close select and focus the trigger\n      this.popoverElement.hidePopover();\n      this.selectTrigger.focus();\n    }\n\n    const newFocusedButton = this.selectOptions.at(newIndex)?.buttonElement;\n    if (newFocusedButton) {\n      newFocusedButton.tabIndex = 0;\n      newFocusedButton.focus();\n    }\n  }\n\n  private setNewValue(newValueEvent: Event) {\n    const newValue = (newValueEvent as CustomEvent).detail.value;\n    const event = new CustomEvent('change', { bubbles: true, composed: true, detail: { value: newValue } });\n    this.dispatchEvent(event);\n    this.value = newValue;\n    this.selectOptions.forEach((opt) => {\n      opt.selectedValue = newValue;\n    });\n\n    /** Updates form validity, and sets the value on a form, if it exists. */\n    this.updateValidState();\n    this.elementInternals.setFormValue(newValue);\n\n    this.popoverElement.hidePopover();\n    this.selectTrigger.focus();\n  }\n\n  /**\n   * We need to stop click events on the popover, since they will bubble to the\n   * label element that wraps the select-component and trigger an \"showPopover\" event.\n   */\n  private stopOptionClickEventPropagation(event: PointerEvent) {\n    event.stopPropagation();\n  }\n\n  render() {\n    const selectedOption = this.selectOptions.find((option) => option.value === this.value);\n\n    return html`\n      <button \n        class=\"trigger\" \n        popovertarget=\"popover\"\n        role=\"combobox\"\n        aria-haspopup=\"listbox\"\n        aria-expanded=${this.isExpanded}\n        aria-controls=\"popover\"\n        aria-describedby=${this['aria-describedby']}\n        id=${this.id}\n        required=${this.required}\n        value=${this.value}\n        @keydown=${this.onTriggerKeyDown}\n        @blur=${this.updateValidState}\n      >\n        <span class=\"trigger-content\" .innerHTML=${selectedOption?.innerHTML ?? ''}></span>\n        <cx-icon name=\"down\" class=${classMap({ rotated: this.isExpanded })}></cx-icon>\n      </button>\n\n      <div\n        role=\"listbox\"\n        popover\n        @toggle=${this.onPopoverToggle}\n        id=\"popover\"\n        aria-multiselectable=\"false\"\n        @click=${this.stopOptionClickEventPropagation}\n      >\n        <slot @slotchange=${this.onSlotChange}></slot>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cx-select': Select;\n  }\n}\n", "import type { LitElement } from 'lit';\n\ndeclare class FormControlInterface {\n  elementInternals: ElementInternals;\n}\n\n// biome-ignore lint/complexity/noBannedTypes: <explanation>\n// biome-ignore lint/suspicious/noExplicitAny: <explanation>\ntype Constructor<T = {}> = new (...args: any[]) => T;\n\nexport const FormControl = <T extends Constructor<LitElement>>(superClass: T) => {\n  class FormControlClass extends superClass {\n    /**\n     * This is a magic prop that identifies the element\n     * as a form-associated custom element.\n     **/\n    static formAssociated = true;\n\n    elementInternals: ElementInternals;\n\n    get label() {\n      return this.elementInternals.labels;\n    }\n\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    constructor(...args: any[]) {\n      super(...args);\n      this.elementInternals = this.attachInternals();\n    }\n  }\n\n  return FormControlClass as Constructor<FormControlInterface> & T;\n};\n", "import { LitElement, css, html } from 'lit';\nimport { customElement, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\n\nimport { InputModeDetector } from '../shared/inputModeDetector';\nimport type { OptionValue } from './types';\n\n@customElement('cx-option')\nexport class Option extends LitElement {\n  static styles = [\n    css`\n      button {\n        --cx-gradient-highlight: var(--cx-color-background-primary);\n        --cx-gradient-background: var(--cx-color-background-primary);\n\n        display: flex;\n        gap: var(--cx-spacing-2);\n        align-items: center;\n        color: var(--cx-color-text-primary);\n        border: none;\n        padding: var(--cx-spacing-5) var(--cx-spacing-6);\n        line-height: 1rem;\n        font-family: inherit;\n        font-size: 0.875rem;\n        font-weight: 400;\n        width: 100%;\n        background-image: linear-gradient(62deg, var(--cx-gradient-highlight) 28.33%, var(--cx-gradient-background) 127.11%);\n        transition: 200ms ease;\n        transition-property: color, --cx-gradient-highlight, --cx-gradient-background;\n\n        &:where(:focus, :hover) {\n          outline: none;\n        }\n\n        &:not(:disabled) {\n          cursor: pointer;\n\n          &:is(:not(.input-mode-mouse):focus, .input-mode-mouse:hover) {\n            --cx-gradient-highlight: var(--cx-color-grey-700);\n            --cx-gradient-background: var(--cx-color-blue);\n            color: var(--cx-color-text-static-light);\n          }\n        }\n\n        &.active {\n          --cx-gradient-highlight: var(--cx-color-background-accent-5);\n          --cx-gradient-background: var(--cx-color-background-accent-5);\n        }\n      }\n    `,\n  ];\n\n  @state()\n  selectedValue: OptionValue = '';\n\n  @property({ type: String, reflect: true })\n  value: OptionValue | null = null;\n\n  @query('button')\n  buttonElement!: HTMLButtonElement;\n\n  private inputModeDetector = new InputModeDetector(this);\n\n  private onSelect() {\n    const event = new CustomEvent('option-select', {\n      bubbles: true,\n      composed: true,\n      detail: { value: this.value },\n    });\n\n    this.dispatchEvent(event);\n  }\n\n  render() {\n    const isSelected = !!this.selectedValue && this.selectedValue === this.value;\n\n    return html`\n      <button\n        role=\"option\"\n        @click=${this.onSelect}\n        aria-selected=${isSelected}\n        class=${classMap({ active: isSelected, 'input-mode-mouse': this.inputModeDetector.inputMode === 'mouse' })}\n      >\n        <slot></slot>\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cx-option': Option;\n  }\n}\n", "import type { ReactiveController, ReactiveControllerHost } from 'lit';\n\nexport class InputModeDetector implements ReactiveController {\n  private abortMouseListener = new AbortController();\n  private abortKeydownListener = new AbortController();\n\n  /** We start by assuming keyboard is main input mode */\n  inputMode: 'mouse' | 'keyboard' = 'keyboard';\n\n  constructor(private host: ReactiveControllerHost) {\n    this.host.addController(this);\n  }\n\n  hostConnected() {\n    /** We have to use arrow functions when we create the event listeners.\n     * This is because the methods refer to `this.inputMode`, and we need `this`\n     * to be a reference to the class, not the function itself.\n     *\n     * In order to stop the event listeners, we use abort controllers, since\n     * we're unable to remove the event listeners since we rely on arrow function.\n     */\n    document.addEventListener('mousemove', () => this.setMouseInputMode(), {\n      signal: this.abortMouseListener.signal,\n    });\n  }\n\n  hostDisconnected() {\n    this.abortMouseListener.abort();\n    this.abortKeydownListener.abort();\n  }\n\n  private setMouseInputMode() {\n    if (this.inputMode !== 'mouse') {\n      this.inputMode = 'mouse';\n      this.host.requestUpdate();\n\n      /** Switch to listening for keyboard events */\n      this.abortMouseListener.abort();\n      this.abortKeydownListener = new AbortController();\n      document.addEventListener('keydown', () => this.setKeyboardInputMode(), {\n        signal: this.abortKeydownListener.signal,\n      });\n    }\n  }\n\n  private setKeyboardInputMode() {\n    if (this.inputMode !== 'keyboard') {\n      this.inputMode = 'keyboard';\n      this.host.requestUpdate();\n\n      /** Switch to listening for mouse events */\n      this.abortKeydownListener.abort();\n      this.abortMouseListener = new AbortController();\n      document.addEventListener('mousemove', () => this.setMouseInputMode(), {\n        signal: this.abortMouseListener.signal,\n      });\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["LitElement", "css", "html", "customElement", "property", "query", "state", "classMap", "LitElement", "html", "classMap", "css", "state", "property", "query", "customElement"]
}
